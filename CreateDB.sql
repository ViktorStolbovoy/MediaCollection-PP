GRANT SELECT, DELETE, UPDATE, INSERT ON ALL TABLES IN SCHEMA app TO sa;
GRANT EXECUTE  ON ALL FUNCTIONS IN SCHEMA app TO sa;

DROP TABLE app.DEVICE_LOCATION_MAP CASCADE;
DROP TABLE app.DEVICE CASCADE;

DROP TABLE app.TILTE_RATING CASCADE;
DROP TABLE app.RATING_PROVIDER CASCADE;
DROP TABLE app.TILTE_EXTERNAL_LINK CASCADE;
DROP TABLE app.EXTERNAL_PROVIDER CASCADE;
DROP TABLE app.TITLE_PROPERTY CASCADE;
DROP TABLE app.PROPERTY CASCADE;
DROP TABLE app.MEDIA_SAMPLE CASCADE;
DROP TABLE app.MEDIA_KIND CASCADE;
DROP TABLE app.LOCATION CASCADE;
DROP TABLE app.LOCATION_BASE CASCADE;
DROP TABLE app.TITLE CASCADE;
DROP TABLE app.APP_CONFIG CASCADE;




CREATE TABLE IF NOT EXISTS app.APP_CONFIG
(
	CONFIG_KEY text NOT NULL CONSTRAINT PK_APP_CONFIG PRIMARY KEY,
	CONFIG_VALUE text NULL
);

-- Titles --------------------------------------------------------------------------------


CREATE TABLE IF NOT EXISTS app.TITLE
(
	TITLE_ID serial NOT NULL CONSTRAINT PK_TITLE PRIMARY KEY,
	TITLE_NAME text NOT NULL,
	KIND char(1)  NOT NULL, 
	DATE_ADDED_UTC timestamp without time zone NOT NULL default (now() at time zone 'utc'),
	DATE_MODIFIED_UTC timestamp without time zone NOT NULL default (now() at time zone 'utc'),
	PARENT_TITLE_ID int NULL CONSTRAINT FK_TITLE__PARENT_TITLE_ID REFERENCES app.TITLE,
	ORD int NOT NULL
);

DO $$
BEGIN

IF NOT EXISTS (
    SELECT 1
    FROM   pg_class c
    WHERE  upper(c.relname) = 'IX_TITLE__TITLE_NAME__KIND'
    ) THEN

    CREATE INDEX IX_TITLE__TITLE_NAME__KIND ON app.TITLE(TITLE_NAME, KIND);
END IF;

END$$;

DO $$
BEGIN

IF NOT EXISTS (
    SELECT 1
    FROM   pg_class c
    WHERE  upper(c.relname) = 'IX_TITLE__PARENT_TITLE_ID'
    ) THEN

    CREATE INDEX IX_TITLE__PARENT_TITLE_ID ON app.TITLE(PARENT_TITLE_ID);
END IF;

END$$;

-- Device specific stuff
CREATE TABLE IF NOT EXISTS app.DEVICE
(
	DEVICE_ID serial NOT NULL CONSTRAINT PK_DEVICE PRIMARY KEY,
	DEVICE_NAME text NOT NULL,
	DEVICE_KIND int NOT NULL,
	DEVICE_DATA text NOT NULL
);



-- Media location -------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS app.LOCATION_BASE
(
	LOCATION_BASE_ID serial NOT NULL CONSTRAINT PK_LOCATION_BASE PRIMARY KEY,
	LOCATION_KIND char(1) NOT NULL,
	LOCATION text NOT NULL
);


CREATE TABLE IF NOT EXISTS app.DEVICE_LOCATION_MAP
(
	DEVICE_ID int NOT NULL CONSTRAINT FK_DEVICE_LOCATION_MAP__DEVICE_ID REFERENCES app.DEVICE, 
	LOCATION_BASE_ID int NOT NULL CONSTRAINT FK_LOCATION__LOCATION_BASE_ID REFERENCES app.LOCATION_BASE,
	LOCATION_MAPPING text NOT NULL,
	CONSTRAINT PK_DEVICE_LOCATION_MAP PRIMARY KEY(DEVICE_ID, LOCATION_BASE_ID)
);


CREATE TABLE IF NOT EXISTS app.LOCATION
(
	LOCATION_ID smallint NOT NULL CONSTRAINT PK_LOCATION PRIMARY KEY,
	TITLE_ID int NOT NULL CONSTRAINT FK_LOCATION__PARENT_TITLE_ID REFERENCES app.TITLE,
	LOCATION_BASE_ID int NOT NULL,
	MEDIA_KIND char(1) NOT NULL,
	DATE_ADDED_UTC timestamp without time zone NOT NULL default (now() at time zone 'utc'),
	DATE_MODIFIED_UTC timestamp without time zone NOT NULL default (now() at time zone 'utc'),
	LOCATION_DATA text
);

DO $$
BEGIN

IF NOT EXISTS (
    SELECT 1
    FROM   pg_class c
    WHERE  upper(c.relname) = 'IX_LOCATION__TITLE_ID'
    ) THEN

    CREATE INDEX IX_LOCATION__TITLE_ID ON app.LOCATION(TITLE_ID);
END IF;

IF NOT EXISTS (
    SELECT 1
    FROM   pg_class c
    WHERE  upper(c.relname) = 'IX_LOCATION__LOCATION_KIND__LOCATION_DATA'
    ) THEN

    CREATE INDEX IX_LOCATION__LOCATION_KIND__LOCATION_DATA ON app.LOCATION(LOCATION_DATA);
END IF;

END$$;

-- Media samples (images, etc) -------------------------------------------------------------------

CREATE TABLE IF NOT EXISTS app.MEDIA_KIND 
(
	MEDIA_KIND_ID smallint NOT NULL CONSTRAINT PK_MEDIA_KIND PRIMARY KEY,
	MEDIA_TYPE char(1) NOT NULL,
	MEDIA_KIND_NAME text NOT NULL
);


CREATE TABLE IF NOT EXISTS app.MEDIA_SAMPLE 
(
	TITLE_ID int NOT NULL CONSTRAINT FK_MEDIA_SAMPLE__TITLE_ID REFERENCES app.TITLE,
	MEDIA_KIND_ID smallint NOT NULL CONSTRAINT FK_MEDIA_SAMPLE__MEDIA_KIND_ID REFERENCES app.MEDIA_KIND,
	CHUNK_ORDER  int NOT NULL,
	DATA bytea NOT NULL,
	CONSTRAINT PK_MEDIA PRIMARY KEY(TITLE_ID, MEDIA_KIND_ID, CHUNK_ORDER)
);




-- Custom properties -------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS app.PROPERTY
(
	PROPERTY_ID int NOT NULL CONSTRAINT PK_PROPERTY PRIMARY KEY,
	PROPERTY_KIND char(1) NOT NULL,
	PROPERTY_NAME text NOT NULL
);

DO $$
BEGIN

IF NOT EXISTS (
    SELECT 1
    FROM   pg_class c
    WHERE  upper(c.relname) = 'IX_PROPERTY__PROPERTY_NAME__PROPERTY_KIND'
    ) THEN

    CREATE INDEX IX_PROPERTY__PROPERTY_NAME__PROPERTY_KIND ON app.PROPERTY(PROPERTY_NAME, PROPERTY_KIND);
END IF;
END$$;


CREATE TABLE IF NOT EXISTS app.TITLE_PROPERTY
(
	TITLE_ID int NOT NULL CONSTRAINT FK_TITLE_PROPERTY__TITLE_ID REFERENCES app.TITLE,
	PROPERTY_ID int NOT NULL CONSTRAINT FK_TITLE_PROPERTY__PROPERTY_ID REFERENCES app.PROPERTY,
	PROPERTY_VALUE text NULL,
	CONSTRAINT PK_TITLE_PROPERTY PRIMARY KEY(TITLE_ID, PROPERTY_ID)
);

-- External info providers  ----------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS app.EXTERNAL_PROVIDER
(
	PROVIDER_ID int NOT NULL CONSTRAINT PK_EXTERNAL_PROVIDER PRIMARY KEY,
	PROVIDER_KIND char(1) NOT NULL,
	PROVIDER_NAME text NOT NULL,
	URL_TEMPLATE text NOT NULL
);

DO $$
BEGIN

IF NOT EXISTS (
    SELECT 1
    FROM   pg_class c
    WHERE  upper(c.relname) = 'IX_PROPERTY__PROVIDER_NAME_PROVIDER_KIND'
    ) THEN

    CREATE INDEX IX_PROPERTY__PROVIDER_NAME_PROVIDER_KIND ON app.EXTERNAL_PROVIDER(PROVIDER_NAME, PROVIDER_KIND);
END IF;
END$$;

CREATE TABLE IF NOT EXISTS app.TILTE_EXTERNAL_LINK
(
	TITLE_ID int NOT NULL CONSTRAINT FK_TILTE_EXTERNAL_LINK__TITLE_ID REFERENCES app.TITLE,
	PROVIDER_ID int NOT NULL CONSTRAINT FK_TILTE_EXTERNAL_LINK__PROVIDER_ID REFERENCES app.EXTERNAL_PROVIDER,
	LINK_DATA text NOT NULL,
	CONSTRAINT PK_TILTE_EXTERNAL_LINK PRIMARY KEY(TITLE_ID, PROVIDER_ID)
);

DO $$
BEGIN

IF NOT EXISTS (
    SELECT 1
    FROM   pg_class c
    WHERE  upper(c.relname) = 'IX_TILTE_EXTERNAL_LINK__PROVIDER_ID__LINK_DATA'
    ) THEN

    CREATE INDEX IX_TILTE_EXTERNAL_LINK__PROVIDER_ID__LINK_DATA ON app.TILTE_EXTERNAL_LINK(PROVIDER_ID, LINK_DATA);
END IF;
END$$;

-- Raitings  ----------------------------------------------------------------------------------------------

CREATE TABLE IF NOT EXISTS app.RATING_PROVIDER
(
	RATING_ID int NOT NULL CONSTRAINT PK_RATING_PROVIDER PRIMARY KEY,
	RATING_KIND char(1) NOT NULL,
	RATING_NAME text NOT NULL
);

DO $$
BEGIN

IF NOT EXISTS (
    SELECT 1
    FROM   pg_class c
    WHERE  upper(c.relname) = 'IX_RATING_PROVIDER__RATING_NAME__RATING_KIND'
    ) THEN

    CREATE INDEX IX_RATING_PROVIDER__RATING_NAME__RATING_KIND ON app.RATING_PROVIDER(RATING_NAME, RATING_KIND);
END IF;
END$$;

CREATE TABLE IF NOT EXISTS app.TILTE_RATING
(
	TITLE_ID int NOT NULL CONSTRAINT FK_TILTE_RATING__TITLE_ID REFERENCES app.TITLE,
	RATING_ID int NOT NULL CONSTRAINT FK_TILTE_RATING__RATING_ID REFERENCES app.RATING_PROVIDER,
	RATING_VALUE float NOT NULL,
	CONSTRAINT PK_TILTE_RATING PRIMARY KEY(TITLE_ID, RATING_ID)
);

DO $$
BEGIN

IF NOT EXISTS (
    SELECT 1
    FROM   pg_class c
    WHERE  upper(c.relname) = 'IX_TILTE_RATING__RATING_ID__RATING_VALUE'
    ) THEN

    CREATE INDEX IX_TILTE_RATING__RATING_ID__RATING_VALUE ON app.TILTE_RATING(RATING_ID, RATING_VALUE);
END IF;
END$$;

INSERT INTO app.PROPERTY(PROPERTY_ID, PROPERTY_KIND, PROPERTY_NAME)
SELECT 1, 'S', 'Description'
WHERE not exists (select 1 from app.PROPERTY where PROPERTY_ID = 1);

INSERT INTO app.MEDIA_KIND(MEDIA_KIND_ID, MEDIA_KIND_NAME, MEDIA_TYPE)
SELECT 1, 'Box front', 'I' 
WHERE not exists (select 1 from app.MEDIA_KIND where MEDIA_KIND_ID = 1);

INSERT INTO app.MEDIA_KIND(MEDIA_KIND_ID, MEDIA_KIND_NAME, MEDIA_TYPE)
SELECT 2, 'Box back', 'I' 
WHERE not exists (select 2 from app.MEDIA_KIND where MEDIA_KIND_ID = 2);


INSERT INTO app.MEDIA_KIND(MEDIA_KIND_ID, MEDIA_KIND_NAME, MEDIA_TYPE)
SELECT 3, 'Disc', 'I' 
WHERE not exists (select 2 from app.MEDIA_KIND where MEDIA_KIND_ID = 3);


INSERT INTO app.MEDIA_KIND(MEDIA_KIND_ID, MEDIA_KIND_NAME, MEDIA_TYPE)
SELECT 4, 'Trailer', 'V' 
WHERE not exists (select 2 from app.MEDIA_KIND where MEDIA_KIND_ID = 4);



-----------------------------------------------------------------------------------------------------------------
--- Functions
-----------------------------------------------------------------------------------------------------------------

/*CREATE OR REPLACE FUNCTION app.CM_TITLE_Set

CREATE OR REPLACE FUNCTION app.CM_TITLE_Update
CREATE OR REPLACE FUNCTION app.CM_TITLE_Remove
CREATE OR REPLACE FUNCTION app.CM_TITLE_List*/

